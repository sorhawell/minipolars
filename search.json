[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Soren Welling. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Welling S (2022). minipolars: Polars ported R.. R package version 0.0.1.","code":"@Manual{,   title = {minipolars: Polars ported to R.},   author = {Soren Welling},   year = {2022},   note = {R package version 0.0.1}, }"},{"path":"/index.html","id":"minipolars","dir":"","previous_headings":"","what":"Polars ported to R. ","title":"Polars ported to R. ","text":"Use awesome polars DataFrame library R!","code":""},{"path":"/index.html","id":"build","dir":"","previous_headings":"","what":"build","title":"Polars ported to R. ","text":"install rust + set buildchain nightly clone repo source(\"./renv/activate.R\") install set R packages (likely automatically triggered .Rprofile) rextendr::document() compile rust code quick build package R CMD INSTALL ---multiarch ---keep.source minipolars build final package devtools::test() run unit tests.","code":""},{"path":"/index.html","id":"minipolars_teaser","dir":"","previous_headings":"","what":"minipolars_teaser","title":"Polars ported to R. ","text":"Søren Welling 12/09/2022","code":""},{"path":"/index.html","id":"what-is-minipolars","dir":"","previous_headings":"","what":"What is minipolars","title":"Polars ported to R. ","text":"Minipolars unofficial porting polars (pola-rs) R package. aim finish project 2022. Beta ready end September 2022. Polars fastest data table query library. syntax related Spark, column oriented row oriented. R libraries also column oriented feel familiar. Unlike Spark, polars natively multithreaded instead multinode(d). make polars simple install use R package. Like Spark SQL-variants polars optimizes queries memory consuption speed don’t . Expect 5-10 speedup compared dplyr simple transformations >500Mb data. chaining many operations speedup due optimization can even higher. Polars built apache-arrow memory model. port relies extendr https://github.com/extendr R equivalent pyo3+maturin. Extendr convenient calling rust R reverse.","code":""},{"path":"/index.html","id":"hello-world","dir":"","previous_headings":"","what":"Hello world","title":"Polars ported to R. ","text":"","code":"#loading the package minipolars only exposes a few functions  library(minipolars)  #all constructors are accessed via pl  #Here we go, Hello world written with polars expressions pl$col(\"hello\")$sum()$over(c(\"world\",\"from\"))$alias(\"polars\") ## polars Expr: col(\"hello\").sum().over([col(\"world\"), col(\"from\")]).alias(\"polars\")"},{"path":"/index.html","id":"typical-ussage","dir":"","previous_headings":"","what":"Typical ussage","title":"Polars ported to R. ","text":"dplyr %>%-piping `data.table [,]-indexing, method chaining object$m1()$m2() bread butter syntax polars. now best learning material understand syntax power polars official user guide python. minipolars syntax ( except $ instead .) guide quite useful. following example shows typical ‘polar_frame’ method together chained expressions.","code":"#create polar_frames from iris df = pl$DataFrame(iris)  #make selection (similar to dplyr mutute() and data.table [,.()] ) and use expressions or strings.  df = df$select(   pl$col(\"Sepal.Width\")$sum()$over(\"Species\")$alias(\"sw_sum_over_species\"),   pl$col(\"Sepal.Length\")$sum()$over(\"Species\")$alias(\"sl_sum_over_species\"),   \"Petal.Width\" )  #polars expressions are column instructions  #1 take the column named Sepal.Width #2 sum it... #3 over(by) the column  Species #4 rename/alias to sw_sum_over_species   #convert back to data.frame head(df$as_data_frame()) ##   sw_sum_over_species sl_sum_over_species Petal.Width ## 1               171.4               250.3         0.2 ## 2               171.4               250.3         0.2 ## 3               171.4               250.3         0.2 ## 4               171.4               250.3         0.2 ## 5               171.4               250.3         0.2 ## 6               171.4               250.3         0.4"},{"path":"/index.html","id":"polar_frame-from-series-and-r-vectors","dir":"","previous_headings":"","what":"polar_frame from series and R vectors","title":"Polars ported to R. ","text":"","code":"#a single column outside a polars_frame is called a series pl$Series((1:5) * 5,\"my_series\") ## polars Series: shape: (5,) ## Series: 'my_series' [f64] ## [ ##  5.0 ##  10.0 ##  15.0 ##  20.0 ##  25.0 ## ] #Create polar_From  from a list of series and/or plain R vectors. values = list (   newname = pl$Series(c(1,2,3,4,5),name = \"b\"), #overwrite name b with 'newname'   pl$Series((1:5) * 5,\"a\"),   pl$Series(letters[1:5],\"b\"),   c(5,4,3,2,1), #unnamed vector   named_vector = c(15,14,13,12,11) ,#named provide   c(5,4,3,2,0) )  pl$DataFrame(values) ## polars DataFrame: shape: (5, 6) ## ┌─────────┬──────┬─────┬─────────────┬──────────────┬─────────────┐ ## │ newname ┆ a    ┆ b   ┆ newcolumn_1 ┆ named_vector ┆ newcolumn_2 │ ## │ ---     ┆ ---  ┆ --- ┆ ---         ┆ ---          ┆ ---         │ ## │ f64     ┆ f64  ┆ str ┆ f64         ┆ f64          ┆ f64         │ ## ╞═════════╪══════╪═════╪═════════════╪══════════════╪═════════════╡ ## │ 1.0     ┆ 5.0  ┆ a   ┆ 5.0         ┆ 15.0         ┆ 5.0         │ ## ├╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌┼╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌┤ ## │ 2.0     ┆ 10.0 ┆ b   ┆ 4.0         ┆ 14.0         ┆ 4.0         │ ## ├╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌┼╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌┤ ## │ 3.0     ┆ 15.0 ┆ c   ┆ 3.0         ┆ 13.0         ┆ 3.0         │ ## ├╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌┼╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌┤ ## │ 4.0     ┆ 20.0 ┆ d   ┆ 2.0         ┆ 12.0         ┆ 2.0         │ ## ├╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌┼╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌┤ ## │ 5.0     ┆ 25.0 ┆ e   ┆ 1.0         ┆ 11.0         ┆ 0.0         │ ## └─────────┴──────┴─────┴─────────────┴──────────────┴─────────────┘"},{"path":"/index.html","id":"data-types","dir":"","previous_headings":"","what":"Data types","title":"Polars ported to R. ","text":"","code":"#polars is strongly typed. Data-types can be created like this: pl$dtypes$Float64 ## polars DataType: Float64 pl$dtypes$Int32 ## polars DataType: Int32 pl$dtypes$Int64 #not R native type ## polars DataType: Int64"},{"path":"/index.html","id":"read-csv-and-the-polars_lazy_frame","dir":"","previous_headings":"","what":"Read csv and the polars_lazy_frame","title":"Polars ported to R. ","text":"","code":"#using iris.csv as example   write.csv(iris, \"iris.csv\",row.names = FALSE)    #read csv into a lazy_polar_frame and compute sum of Sepal.Width over Species   lpf = pl$lazy_csv_reader(\"iris.csv\")$select(     pl$col(\"Sepal.Width\")$sum()$over(\"Species\")   )      #a lazy frame is only a tree of instructions   print(lpf) #same as lpf$describe_plan() ## [1] \"polars LazyFrame naive plan: (run ldf$describe_optimized_plan() to see the optimized plan)\" ## SELECT 1 COLUMNS: [col(\"Sepal.Width\").sum().over([col(\"Species\")])] ## FROM ## CSV SCAN iris.csv; PROJECT */5 COLUMNS; SELECTION: None #read plan from bottom to top, says:  \"read entire csv, then compute sum x over y\"      #what polars actually will do is the optimized plan      lpf$describe_optimized_plan() ## SELECT 1 COLUMNS: [col(\"Sepal.Width\").sum().over([col(\"Species\")])] ## FROM ## CSV SCAN iris.csv; PROJECT 2/5 COLUMNS; SELECTION: None  ## NULL #optimized plan says:  \"read only column x and y from csv, compute sum x over y\"      #Only reading some columns or in other cases some row in to memory can save speed downstream operations. This is called peojection.          #to execute plan, simply call $collect() and get a polars_frame as result      lpf$collect() ## polars DataFrame: shape: (150, 1) ## ┌─────────────┐ ## │ Sepal.Width │ ## │ ---         │ ## │ f64         │ ## ╞═════════════╡ ## │ 171.4       │ ## ├╌╌╌╌╌╌╌╌╌╌╌╌╌┤ ## │ 171.4       │ ## ├╌╌╌╌╌╌╌╌╌╌╌╌╌┤ ## │ 171.4       │ ## ├╌╌╌╌╌╌╌╌╌╌╌╌╌┤ ## │ 171.4       │ ## ├╌╌╌╌╌╌╌╌╌╌╌╌╌┤ ## │ ...         │ ## ├╌╌╌╌╌╌╌╌╌╌╌╌╌┤ ## │ 148.7       │ ## ├╌╌╌╌╌╌╌╌╌╌╌╌╌┤ ## │ 148.7       │ ## ├╌╌╌╌╌╌╌╌╌╌╌╌╌┤ ## │ 148.7       │ ## ├╌╌╌╌╌╌╌╌╌╌╌╌╌┤ ## │ 148.7       │ ## └─────────────┘"},{"path":"/index.html","id":"pass-user-defined-functions-to-polars","dir":"","previous_headings":"","what":"Pass user defined functions to polars","title":"Polars ported to R. ","text":"possible mix R code polars passing user defined functions polars. User defined functions slower. Use native polar functions/expressions possible.","code":"pl$DataFrame(iris)$select(       pl$col(\"Sepal.Length\")$map(\\(s) {         x = s$to_r_vector() #convert from Series to a native R vector         x[x>=5] = 10         x[1:10] # if return is R vector, it will automatically be converted to Series again       })     )$as_data_frame() ##    Sepal.Length ## 1          10.0 ## 2           4.9 ## 3           4.7 ## 4           4.6 ## 5          10.0 ## 6          10.0 ## 7           4.6 ## 8          10.0 ## 9           4.4 ## 10          4.9"},{"path":"/reference/DataFrame.html","id":null,"dir":"Reference","previous_headings":"","what":"Polars DataFrame — DataFrame","title":"Polars DataFrame — DataFrame","text":"DataFrame-object externalptr rust polars DataFrame $methods() exposed. methods return another DataFrame-class instance similar allows method chaining. Commonmark web site","code":""},{"path":"/reference/DataFrame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Polars DataFrame — DataFrame","text":"","code":"DataFrame_select(...)  DataFrame_filter(bool_expr)"},{"path":"/reference/DataFrame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Polars DataFrame — DataFrame","text":"... expressions strings bool_expr Polars expression evaluate bool pl$Series data object inheriting data.frame list equal length vectors /Series.","code":""},{"path":"/reference/DataFrame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Polars DataFrame — DataFrame","text":"","code":"df$lazy()$lazy()$filter(pl$col(\"Sepal.Length\") > 5)$collect()  pl$DataFrame(iris)$lazy()$filter(pl$col(\"Sepal.Length\") >= 7.7)$collect()"},{"path":"/reference/DataFrame_constructor.html","id":null,"dir":"Reference","previous_headings":"","what":"create new DataFrame — DataFrame_constructor","title":"create new DataFrame — DataFrame_constructor","text":"create new DataFrame","code":""},{"path":"/reference/DataFrame_constructor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create new DataFrame — DataFrame_constructor","text":"","code":"DataFrame_constructor(data)"},{"path":"/reference/DataFrame_constructor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create new DataFrame — DataFrame_constructor","text":"data data.frame list mixed vectors Series equal length.","code":""},{"path":"/reference/DataFrame_constructor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"create new DataFrame — DataFrame_constructor","text":"DataFrame","code":""},{"path":"/reference/DataFrame_constructor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"create new DataFrame — DataFrame_constructor","text":"","code":"minipolars:::new_pf(iris) #with namespace pl$DataFrame(iris) pl$DataFrame(list(some_column_name = c(1,2,3,4,5)))"},{"path":"/reference/DataType.html","id":null,"dir":"Reference","previous_headings":"","what":"DataTypes polars types — DataType","title":"DataTypes polars types — DataType","text":"DataType types available polars","code":""},{"path":"/reference/Expr.html","id":null,"dir":"Reference","previous_headings":"","what":"polars literal — lit","title":"polars literal — lit","text":"polars literal","code":""},{"path":"/reference/Expr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"polars literal — lit","text":"","code":"Expr_map(lambda, output_type = NULL, `_agg_list` = NULL)"},{"path":"/reference/Expr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"polars literal — lit","text":"x R expression yielding integer, float bool","code":""},{"path":"/reference/Expr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"polars literal — lit","text":"Expr, literal value","code":""},{"path":"/reference/Expr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"polars literal — lit","text":"","code":"pl$col(\"some_column\") / pl$lit(42)"},{"path":"/reference/GroupBy_agg.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregatete a DataFrame over a groupby — GroupBy_agg","title":"Aggregatete a DataFrame over a groupby — GroupBy_agg","text":"Hej mor","code":""},{"path":"/reference/GroupBy_agg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregatete a DataFrame over a groupby — GroupBy_agg","text":"","code":"GroupBy_agg(...)"},{"path":"/reference/GroupBy_agg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregatete a DataFrame over a groupby — GroupBy_agg","text":"... exprs aggregate","code":""},{"path":"/reference/GroupBy_agg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregatete a DataFrame over a groupby — GroupBy_agg","text":"aggregated DataFrame","code":""},{"path":"/reference/GroupBy_agg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregatete a DataFrame over a groupby — GroupBy_agg","text":"","code":"pl$DataFrame(   list(     foo = c(\"one\", \"two\", \"two\", \"one\", \"two\"),     bar = c(5, 3, 2, 4, 1)   ) )$groupby( \"foo\" )$agg(  pl$col(\"bar\")$sum()$alias(\"bar_sum\"),  pl$col(\"bar\")$mean()$alias(\"bar_tail_sum\") )"},{"path":"/reference/GroupBy_as_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"convert to data.frame — GroupBy_as_data_frame","title":"convert to data.frame — GroupBy_as_data_frame","text":"convert data.frame","code":""},{"path":"/reference/GroupBy_as_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"convert to data.frame — GroupBy_as_data_frame","text":"","code":"GroupBy_as_data_frame(...)"},{"path":"/reference/GroupBy_as_data_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"convert to data.frame — GroupBy_as_data_frame","text":"... opt param passed R .data.frame","code":""},{"path":"/reference/GroupBy_as_data_frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"convert to data.frame — GroupBy_as_data_frame","text":"R data.frame","code":""},{"path":"/reference/GroupBy_as_data_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"convert to data.frame — GroupBy_as_data_frame","text":"","code":"pl$DataFrame(iris)$as_data_frame() #R-polars back and forth"},{"path":"/reference/LazyGroupBy_agg.html","id":null,"dir":"Reference","previous_headings":"","what":"LazyGroupBy_agg — LazyGroupBy_agg","title":"LazyGroupBy_agg — LazyGroupBy_agg","text":"aggregate polar_lazy_groupby","code":""},{"path":"/reference/LazyGroupBy_agg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LazyGroupBy_agg — LazyGroupBy_agg","text":"","code":"LazyGroupBy_agg(...)"},{"path":"/reference/LazyGroupBy_agg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"LazyGroupBy_agg — LazyGroupBy_agg","text":"... Expr string","code":""},{"path":"/reference/LazyGroupBy_agg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"LazyGroupBy_agg — LazyGroupBy_agg","text":"new lazy_polar_frame object.","code":""},{"path":"/reference/LazyGroupBy_apply.html","id":null,"dir":"Reference","previous_headings":"","what":"LazyGroupBy_apply — LazyGroupBy_apply","title":"LazyGroupBy_apply — LazyGroupBy_apply","text":"one day apply","code":""},{"path":"/reference/LazyGroupBy_apply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LazyGroupBy_apply — LazyGroupBy_apply","text":"","code":"LazyGroupBy_apply(f)"},{"path":"/reference/LazyGroupBy_apply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"LazyGroupBy_apply — LazyGroupBy_apply","text":"f lambda function apply","code":""},{"path":"/reference/LazyGroupBy_apply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"LazyGroupBy_apply — LazyGroupBy_apply","text":"new lazy_polar_frame object.","code":""},{"path":"/reference/LazyGroupBy_head.html","id":null,"dir":"Reference","previous_headings":"","what":"LazyGroupBy_head — LazyGroupBy_head","title":"LazyGroupBy_head — LazyGroupBy_head","text":"get n rows head group","code":""},{"path":"/reference/LazyGroupBy_head.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LazyGroupBy_head — LazyGroupBy_head","text":"","code":"LazyGroupBy_head(n = 1L)"},{"path":"/reference/LazyGroupBy_head.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"LazyGroupBy_head — LazyGroupBy_head","text":"n integer number rows get","code":""},{"path":"/reference/LazyGroupBy_head.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"LazyGroupBy_head — LazyGroupBy_head","text":"new lazy_polar_frame object.","code":""},{"path":"/reference/LazyGroupBy_print.html","id":null,"dir":"Reference","previous_headings":"","what":"LazyGroupBy_print — LazyGroupBy_print","title":"LazyGroupBy_print — LazyGroupBy_print","text":"prints opague groupby, much show","code":""},{"path":"/reference/LazyGroupBy_print.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LazyGroupBy_print — LazyGroupBy_print","text":"","code":"LazyGroupBy_print()"},{"path":"/reference/LazyGroupBy_tail.html","id":null,"dir":"Reference","previous_headings":"","what":"LazyGroupBy_tail — LazyGroupBy_tail","title":"LazyGroupBy_tail — LazyGroupBy_tail","text":"get n tail rows group","code":""},{"path":"/reference/LazyGroupBy_tail.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LazyGroupBy_tail — LazyGroupBy_tail","text":"","code":"LazyGroupBy_tail(n = 1L)"},{"path":"/reference/LazyGroupBy_tail.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"LazyGroupBy_tail — LazyGroupBy_tail","text":"n integer number rows get","code":""},{"path":"/reference/LazyGroupBy_tail.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"LazyGroupBy_tail — LazyGroupBy_tail","text":"new lazy_polar_frame object.","code":""},{"path":"/reference/choose.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple match/switch handler — choose","title":"Simple match/switch handler — choose","text":"Simple match/switch handler","code":""},{"path":"/reference/choose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple match/switch handler — choose","text":"","code":"choose(..., or_else = NULL)"},{"path":"/reference/choose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple match/switch handler — choose","text":"... odd arugments bool statements, next even returned prior bool statement first true or_else return bool statements true","code":""},{"path":"/reference/choose.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple match/switch handler — choose","text":"return given first true bool statement otherwise value or_else","code":""},{"path":"/reference/choose.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simple match/switch handler — choose","text":"","code":"n=5 choose(  n<5,\"nope\",  n>6,\"yeah\",  or_else = abort(paste(\"failed to have a case for n=\",n)) )"},{"path":"/reference/construct_ProtoExprArray.html","id":null,"dir":"Reference","previous_headings":"","what":"construct proto Expr array from args — construct_ProtoExprArray","title":"construct proto Expr array from args — construct_ProtoExprArray","text":"construct proto Expr array args","code":""},{"path":"/reference/construct_ProtoExprArray.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"construct proto Expr array from args — construct_ProtoExprArray","text":"","code":"construct_ProtoExprArray(...)"},{"path":"/reference/construct_ProtoExprArray.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"construct proto Expr array from args — construct_ProtoExprArray","text":"... Expr string","code":""},{"path":"/reference/construct_ProtoExprArray.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"construct proto Expr array from args — construct_ProtoExprArray","text":"ProtoExprArray object","code":""},{"path":"/reference/construct_ProtoExprArray.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"construct proto Expr array from args — construct_ProtoExprArray","text":"","code":"construct_ProtoExprArray(pl$col(\"Species\"),\"Sepal.Width\")"},{"path":"/reference/dot-pr.html","id":null,"dir":"Reference","previous_headings":"","what":"polars-API: internal extendr bindings to polars — .pr","title":"polars-API: internal extendr bindings to polars — .pr","text":".pr Contains original rextendr bindings polars","code":""},{"path":"/reference/dot-pr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"polars-API: internal extendr bindings to polars — .pr","text":"","code":".pr"},{"path":"/reference/dot-pr.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"polars-API: internal extendr bindings to polars — .pr","text":"object class environment length 8.","code":""},{"path":"/reference/dot-pr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"polars-API: internal extendr bindings to polars — .pr","text":"","code":"#.pr$DataFrame$print() is an external function where self is passed as arg minipolars:::.pr$DataFrame$print(self = DataFrame(iris))"},{"path":"/reference/expect_strictly_identical.html","id":null,"dir":"Reference","previous_headings":"","what":"more strict than expect_identical — expect_strictly_identical","title":"more strict than expect_identical — expect_strictly_identical","text":"strict expect_identical","code":""},{"path":"/reference/expect_strictly_identical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"more strict than expect_identical — expect_strictly_identical","text":"","code":"expect_strictly_identical(object, expected, ...)"},{"path":"/reference/extendr_method_to_pure_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"extendr methods into pure functions — extendr_method_to_pure_functions","title":"extendr methods into pure functions — extendr_method_to_pure_functions","text":"self global extendr wrapper methods function copies function new environment modify formals self argument","code":""},{"path":"/reference/extendr_method_to_pure_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"extendr methods into pure functions — extendr_method_to_pure_functions","text":"","code":"extendr_method_to_pure_functions(env)"},{"path":"/reference/extendr_method_to_pure_functions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"extendr methods into pure functions — extendr_method_to_pure_functions","text":"env pure function calls rust","code":""},{"path":"/reference/import_polars_as_.html","id":null,"dir":"Reference","previous_headings":"","what":"Bind polars function to a namespace object pl — import_polars_as_","title":"Bind polars function to a namespace object pl — import_polars_as_","text":"Bind polars function namespace object pl","code":""},{"path":"/reference/import_polars_as_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bind polars function to a namespace object pl — import_polars_as_","text":"","code":"import_polars_as_(name = \"pl\")"},{"path":"/reference/import_polars_as_.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bind polars function to a namespace object pl — import_polars_as_","text":"polars alot function names conflicting base R like sum col. disambiguate, minipolars can loaded namesapce, syntactically similar python's import polars pl. major syntactical difference py-polars minipolars R $ used method operator instead ..","code":""},{"path":"/reference/import_polars_as_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bind polars function to a namespace object pl — import_polars_as_","text":"","code":"import_polars_as_(\"pl\") pl$df(iris)$select(pl$col(\"Petal.Length\")$sum()$over(\"Species\"))"},{"path":"/reference/inherits2.html","id":null,"dir":"Reference","previous_headings":"","what":"Return string ","title":"Return string ","text":"Return string \"Hello world!\" R.","code":""},{"path":"/reference/inherits2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return string ","text":"","code":"inherits2(`_class`)"},{"path":"/reference/is_DataFrame_data_input.html","id":null,"dir":"Reference","previous_headings":"","what":"test if suitable to construct polar.frame — is_DataFrame_data_input","title":"test if suitable to construct polar.frame — is_DataFrame_data_input","text":"test suitable construct polar.frame","code":""},{"path":"/reference/is_DataFrame_data_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"test if suitable to construct polar.frame — is_DataFrame_data_input","text":"","code":"is_DataFrame_data_input(x)"},{"path":"/reference/is_DataFrame_data_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"test if suitable to construct polar.frame — is_DataFrame_data_input","text":"robj R object test","code":""},{"path":"/reference/is_DataFrame_data_input.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"test if suitable to construct polar.frame — is_DataFrame_data_input","text":"bool","code":""},{"path":"/reference/is_DataFrame_data_input.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"test if suitable to construct polar.frame — is_DataFrame_data_input","text":"","code":"is_polar_data_input(iris)"},{"path":"/reference/lazy_csv_reader.html","id":null,"dir":"Reference","previous_headings":"","what":"Read csv lazily — lazy_csv_reader","title":"Read csv lazily — lazy_csv_reader","text":"Read csv lazily Read csv DataFrame","code":""},{"path":"/reference/lazy_csv_reader.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read csv lazily — lazy_csv_reader","text":"","code":"lazy_csv_reader(   path,   sep = \",\",   has_header = TRUE,   ignore_errors = FALSE,   skip_rows = 0,   n_rows = NULL,   cache = FALSE,   overwrite_dtype = NULL,   low_memory = FALSE,   comment_char = NULL,   quote_char = \"\\\"\",   null_values = NULL,   infer_schema_length = 100,   rechunk = TRUE,   skip_rows_after_header = 0,   encoding = \"utf8\",   row_count_name = NULL,   row_count_offset = 0,   parse_dates = FALSE )  csv_reader(...)"},{"path":"/reference/lazy_csv_reader.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read csv lazily — lazy_csv_reader","text":"path string, Path file sep Single char use delimiter file. has_header bool, indicate first row dataset header . set False, column names autogenerated following format: column_x, x enumeration every column dataset starting 1. ignore_errors bool, try keep reading lines lines yield errors. First try infer_schema_length=0 read columns pl.Utf8 check values might cause issue. skip_rows integer, Start reading skip_rows lines. header parsed offset. n_rows int (NULL disable),Stop reading CSV file reading n_rows. cache bool, cache result reading. overwrite_dtype (NULL disable) named list dtypes dtype-names, name points column. Can overwrite dtypes inference. Supported types far : name | alias | polars side dtype \"Boolean\" | \"logical\" => DataType::Boolean, \"Float32\" | \"double\" => DataType::Float32, \"Float64\" | \"float64\" => DataType::Float64, \"Int32\" | \"integer\" => DataType::Int32, \"Int64\" | \"integer64\" => DataType::Int64, \"Utf8\" | \"character\" => DataType::Utf8, low_memory bool, reduce memory usage expense performance comment_char (NULL disable) Single byte character indicates start comment line, instance #. quote_char (NULL disable) Single byte character used csv quoting, default = \". Set None turn special handling escaping quotes. null_values (NULL disable) Values interpret null values. can provide String : values equal string null. Unnamed char vector: null value per column. Named char vector.  mapping (names)column null value string(values). infer_schema_length (NULL disable) Maximum number lines read infer schema. set 0, columns read pl.Utf8. set None, full table scan done (slow). rechunk bool Reallocate contiguous memory chunks/ files parsed. skip_rows_after_header bool Skip number rows header parsed. encoding either \"utf8\" \"utf8-lossy\". Lossy means invalid utf8 values replaced � characters. row_count_name String(NULL disable), name added row count column row_count_offset integer, Offset start row_count column (used name set). parse_dates bool Try automatically parse dates. succeed, column remains data type pl.Utf8.","code":""},{"path":"/reference/lazy_csv_reader.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read csv lazily — lazy_csv_reader","text":"lazyframe DataFrame","code":""},{"path":"/reference/lazy_csv_reader.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read csv lazily — lazy_csv_reader","text":"Read file path polars lazy frame. yet supporting eol_char with_column_names","code":""},{"path":"/reference/lazy_csv_reader.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read csv lazily — lazy_csv_reader","text":"","code":"write.csv(iris,\"my.csv\") lazy_frame = minipolars:::lazy_csv_reader(path=\"my.csv\") lazyframe$collect()"},{"path":"/reference/lazy_groupby.html","id":null,"dir":"Reference","previous_headings":"","what":"Lazy_groupby — Lazy_groupby","title":"Lazy_groupby — Lazy_groupby","text":"groupby lazy_polar_frame.","code":""},{"path":"/reference/lazy_groupby.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lazy_groupby — Lazy_groupby","text":"","code":"Lazy_groupby(..., maintain_order = FALSE)"},{"path":"/reference/lazy_groupby.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lazy_groupby — Lazy_groupby","text":"... single Expr string naming column","code":""},{"path":"/reference/lazy_groupby.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lazy_groupby — Lazy_groupby","text":"new lazy_polar_frame object applied filter.","code":""},{"path":"/reference/pl.html","id":null,"dir":"Reference","previous_headings":"","what":"The complete minipolars public API. — pl","title":"The complete minipolars public API. — pl","text":"pl-object list public functions class constructors public functions exported normal package huge namespace collision base:: functions. object-methods accesed object$method via constructed objects. functions namespace similar rust- python- polars api. Speaking namespace pl can converted actual namespace calling import_polars_as_(\"pl\"), recemmended.","code":""},{"path":"/reference/pl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The complete minipolars public API. — pl","text":"","code":"pl"},{"path":"/reference/pl.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"The complete minipolars public API. — pl","text":"object class environment length 9.","code":""},{"path":"/reference/print.DataFrame.html","id":null,"dir":"Reference","previous_headings":"","what":"print DataFrame — print.DataFrame","title":"print DataFrame — print.DataFrame","text":"print DataFrame","code":""},{"path":"/reference/print.DataFrame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"print DataFrame — print.DataFrame","text":"","code":"# S3 method for DataFrame print(x)"},{"path":"/reference/print.DataFrame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"print DataFrame — print.DataFrame","text":"x polar_frame","code":""},{"path":"/reference/print.DataFrame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"print DataFrame — print.DataFrame","text":"self","code":""},{"path":"/reference/print.DataFrame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"print DataFrame — print.DataFrame","text":"","code":"pl$DataFrame(iris)"},{"path":"/reference/print.DataType.html","id":null,"dir":"Reference","previous_headings":"","what":"print a polars datatype — print.DataType","title":"print a polars datatype — print.DataType","text":"print polars datatype","code":""},{"path":"/reference/print.DataType.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"print a polars datatype — print.DataType","text":"","code":"# S3 method for DataType print(x)"},{"path":"/reference/print.DataType.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"print a polars datatype — print.DataType","text":"x DataType","code":""},{"path":"/reference/print.DataType.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"print a polars datatype — print.DataType","text":"self","code":""},{"path":"/reference/print.DataType.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"print a polars datatype — print.DataType","text":"","code":"minipolars:::DataType$new(\"Boolean\")"},{"path":"/reference/print.Expr.html","id":null,"dir":"Reference","previous_headings":"","what":"Print expr — print.Expr","title":"Print expr — print.Expr","text":"Print expr","code":""},{"path":"/reference/print.Expr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print expr — print.Expr","text":"","code":"# S3 method for Expr print(x)"},{"path":"/reference/print.Expr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print expr — print.Expr","text":"x Expr","code":""},{"path":"/reference/print.Expr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print expr — print.Expr","text":"self","code":""},{"path":"/reference/print.Expr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print expr — print.Expr","text":"","code":"pl$col(\"some_column\")$sum()$over(\"some_other_column\")"},{"path":"/reference/print.GroupBy.html","id":null,"dir":"Reference","previous_headings":"","what":"print GroupBy — print.GroupBy","title":"print GroupBy — print.GroupBy","text":"print GroupBy","code":""},{"path":"/reference/print.GroupBy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"print GroupBy — print.GroupBy","text":"","code":"# S3 method for GroupBy print(x)"},{"path":"/reference/print.GroupBy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"print GroupBy — print.GroupBy","text":"x polar_frame","code":""},{"path":"/reference/print.GroupBy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"print GroupBy — print.GroupBy","text":"self","code":""},{"path":"/reference/print.GroupBy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"print GroupBy — print.GroupBy","text":"","code":"pl$DataFrame(iris)$groupby(\"Species\")"},{"path":"/reference/print.LazyFrame.html","id":null,"dir":"Reference","previous_headings":"","what":"print GroupBy — print.LazyFrame","title":"print GroupBy — print.LazyFrame","text":"print GroupBy","code":""},{"path":"/reference/print.LazyFrame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"print GroupBy — print.LazyFrame","text":"","code":"# S3 method for LazyFrame print(x)"},{"path":"/reference/print.LazyFrame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"print GroupBy — print.LazyFrame","text":"x polar_frame","code":""},{"path":"/reference/print.LazyFrame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"print GroupBy — print.LazyFrame","text":"self","code":""},{"path":"/reference/print.LazyFrame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"print GroupBy — print.LazyFrame","text":"","code":"pl$DataFrame(iris)$groupby(\"Species\")"},{"path":"/reference/print.LazyGroupBy.html","id":null,"dir":"Reference","previous_headings":"","what":"print LazyGroupBy — print.LazyGroupBy","title":"print LazyGroupBy — print.LazyGroupBy","text":"print LazyGroupBy","code":""},{"path":"/reference/print.LazyGroupBy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"print LazyGroupBy — print.LazyGroupBy","text":"","code":"# S3 method for LazyGroupBy print(x)"},{"path":"/reference/print.LazyGroupBy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"print LazyGroupBy — print.LazyGroupBy","text":"x LazyGroupBy","code":""},{"path":"/reference/print.LazyGroupBy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"print LazyGroupBy — print.LazyGroupBy","text":"self","code":""},{"path":"/reference/print.Series.html","id":null,"dir":"Reference","previous_headings":"","what":"Print rpl$Series — print.Series","title":"Print rpl$Series — print.Series","text":"Print rpl$Series Print rpl$Series","code":""},{"path":"/reference/print.Series.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print rpl$Series — print.Series","text":"","code":"# S3 method for Series print(x)  # S3 method for Series print(x)"},{"path":"/reference/print.Series.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print rpl$Series — print.Series","text":"x Series","code":""},{"path":"/reference/print.Series.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print rpl$Series — print.Series","text":"self selfie","code":""},{"path":"/reference/print.Series.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print rpl$Series — print.Series","text":"","code":"pl$Series(letters,\"lowercase_letters\") pl$Series(letters,\"lowercase_letters\")"},{"path":"/reference/read_csv_.html","id":null,"dir":"Reference","previous_headings":"","what":"high level csv_reader, will download if path is url — read_csv_","title":"high level csv_reader, will download if path is url — read_csv_","text":"high level csv_reader, download path url","code":""},{"path":"/reference/read_csv_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"high level csv_reader, will download if path is url — read_csv_","text":"","code":"read_csv_(path, lazy = FALSE, reuse_downloaded = TRUE, ...)"},{"path":"/reference/read_csv_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"high level csv_reader, will download if path is url — read_csv_","text":"path file url ...","code":""},{"path":"/reference/read_csv_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"high level csv_reader, will download if path is url — read_csv_","text":"polars_DataFrame polars_lazy_DataFrame","code":""},{"path":"/reference/read_csv_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"high level csv_reader, will download if path is url — read_csv_","text":"","code":"df = read_csv(\"https://j.mp/iriscsv\")"},{"path":"/reference/series.html","id":null,"dir":"Reference","previous_headings":"","what":"Series — Series","title":"Series — Series","text":"Polars pl$Series found api pl$Series named Series_constructor internally","code":""},{"path":"/reference/series.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Series — Series","text":"","code":"Series_constructor(x, name = NULL)"},{"path":"/reference/series.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Series — Series","text":"x vector name string","code":""},{"path":"/reference/series.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Series — Series","text":"Series","code":""},{"path":"/reference/series.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Series — Series","text":"","code":"Series(1:4)"},{"path":"/reference/unwrap.html","id":null,"dir":"Reference","previous_headings":"","what":"rust-like unwrapping of result. Useful to keep error handling on the R side. — unwrap","title":"rust-like unwrapping of result. Useful to keep error handling on the R side. — unwrap","text":"rust-like unwrapping result. Useful keep error handling R side.","code":""},{"path":"/reference/unwrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rust-like unwrapping of result. Useful to keep error handling on the R side. — unwrap","text":"","code":"unwrap(result, class = \"rust result error\", call = sys.call(1L), ...)"},{"path":"/reference/unwrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"rust-like unwrapping of result. Useful to keep error handling on the R side. — unwrap","text":"result list either element ok err NULL class class thrown error call context error ... used","code":""},{"path":"/reference/unwrap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"rust-like unwrapping of result. Useful to keep error handling on the R side. — unwrap","text":"ok-element list , error thrown","code":""},{"path":"/reference/unwrap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"rust-like unwrapping of result. Useful to keep error handling on the R side. — unwrap","text":"","code":"unwrap(list(ok=\"foo\",err=NULL))"},{"path":"/reference/wrap_e.html","id":null,"dir":"Reference","previous_headings":"","what":"wrap as literal — wrap_e","title":"wrap as literal — wrap_e","text":"wrap literal","code":""},{"path":"/reference/wrap_e.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"wrap as literal — wrap_e","text":"","code":"wrap_e(e)"},{"path":"/reference/wrap_e.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"wrap as literal — wrap_e","text":"e Expr(polars) R expression","code":""},{"path":"/reference/wrap_e.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"wrap as literal — wrap_e","text":"Expr","code":""},{"path":"/reference/wrap_e.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"wrap as literal — wrap_e","text":"tiny wrapper allow skipping calling lit rhs binary operator","code":""},{"path":"/reference/wrap_e.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"wrap as literal — wrap_e","text":"","code":"pl$col(\"foo\") < 5"},{"path":"/reference/wrap_s.html","id":null,"dir":"Reference","previous_headings":"","what":"wrap as literal — wrap_s","title":"wrap as literal — wrap_s","text":"wrap literal","code":""},{"path":"/reference/wrap_s.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"wrap as literal — wrap_s","text":"","code":"wrap_s(x)"},{"path":"/reference/wrap_s.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"wrap as literal — wrap_s","text":"e Expr(polars) R expression","code":""},{"path":"/reference/wrap_s.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"wrap as literal — wrap_s","text":"Expr","code":""},{"path":"/reference/wrap_s.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"wrap as literal — wrap_s","text":"tiny wrapper allow skipping calling lit rhs binary operator","code":""},{"path":"/reference/wrap_s.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"wrap as literal — wrap_s","text":"","code":"pl$col(\"foo\") < 5"}]
